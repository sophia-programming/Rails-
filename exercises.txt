Rubyにシンボルがある理由
シンボルと文字列、どちらをコードで使用しても変わらないが、メモリ効率などを考えるとシンボルを使用した方がいい　✅

シンボルとは？
シンボルは、Rubyプログラミング言語で頻繁に使用されるデータ型です。
シンボルは一見文字列のように見えますが、実際には文字列とは異なり、メモリ効率が高く、高速な操作が可能です。

### 文字列とシンボルの違い
簡単に説明すると、文字列はデータを表すために使用され、シンボルはコードの一部として使用されます。
文字列とシンボルは相互に変換可能であり、以下のような違いがあります。
- **文字列**: データ（定数や変数の値など）を表すために使われる。
- **シンボル**: コードの一部として使用され、メソッド呼び出しの引数などに使われる。

### まとめ
- **文字列**: メモリを毎回アロケーションし、バイトごとに比較。GC（ガベージコレクション）で回収可能。
- **シンボル**: 一度だけアロケーションされ、整数で比較。高速で重複しない。


マスアサインメントとは？
マスアサインメントを利用すると、ハッシュ（キーと値のペアの集まり）を使用して複数の属性を一度に設定することができます。
これにより、個々の属性を一つ一つ設定する必要がなくなり、コードの簡潔さと読みやすさが向上します。


partial（パーシャル）とは？
パーシャル（部分テンプレート）は、ビューの一部を再利用可能なコンポーネントとして分離するための機能
これにより、同じコードを複数の場所で再利用でき、ビューのメンテナンスが容易になる。
パーシャルは以下の2つの条件を満たすことで定義されます：
1. **アンダースコアで始まるファイル名**:
    - パーシャルファイルは通常、ファイル名がアンダースコアから始まります。例: `_header.html.erb`。
2. **`render`メソッドを使用して呼び出す**:
    - パーシャルは、他のビューから`render`メソッドを使用して読み込みます。例: `<%= render 'shared/header' %>`。


Railsの開発フロー
通常MVCモデルに沿って行われます。
1. **ルーティング**:
    - リクエストを受け取った際に、どのコントローラのどのアクションを呼び出すかを決定する。
2. **コントローラ**:
    - リクエストを受け取り、モデルを操作してビューにデータを渡す。
3. **モデル**:
    - データベースとやり取りするためのクエリを実行し、データを操作する。
4. **ビュー**:
    - ユーザーに表示するためのHTMLを生成する。


Gravatar
無料のサービスで、プロフィール写真をアップロードして、指定したメールアドレスと関連付けることができる
gravatar_forヘルパーメソッドを使ってGravatarの画像を利用できる

ユーザー登録ページ
上記で重要な要素は、ユーザー登録に不可欠な情報を入力するフォーム。
Railsではform_withヘルパーメソッド
無効なフォームの送信を扱う ⇨ フォームが有効な場合のみ新規ユーザーをデータベースに保存できるようにする ⇨ ユーザー登録フォーム完成

Bootstrap CSSは、flashのクラス用に4つのスタイルを持っています（success、info、warning、danger）


セッション
ユーザーログインの必要なWebアプリケーションでは、セッション（Session）と呼ばれる半永続的な接続をコンピュータ間（ユーザーのパソコンのWebブラウザとRailsサーバーなど）に別途設定します。
Railsでセッションを実装する方法として最も一般的なのは、cookiesを使う方法
cookiesとは、ユーザーのブラウザに保存される小さなテキストデータのこと
ログインでセッションを作成する場合に最初に行うのは、入力が無効な場合の処理

flashのメッセージとは異なり、flash.nowのメッセージはその後リクエストが発生したときに消滅
